#reader(lib"read.ss""wxme")WXME0108 ## 
#|
   This file uses the GRacket editor format.
   Open this file in DrRacket version 6.8 or later to read it.

   Most likely, it was created by saving a program in DrRacket,
   and it probably contains a program with non-text elements
   (such as images or comment boxes).

            http://racket-lang.org/
|#
 33 7 #"wxtext\0"
3 1 6 #"wxtab\0"
1 1 8 #"wximage\0"
2 0 8 #"wxmedia\0"
4 1 34 #"(lib \"syntax-browser.ss\" \"mrlib\")\0"
1 0 36 #"(lib \"cache-image-snip.ss\" \"mrlib\")\0"
1 0 68
(
 #"((lib \"image-core.ss\" \"mrlib\") (lib \"image-core-wxme.rkt\" \"mr"
 #"lib\"))\0"
) 1 0 16 #"drscheme:number\0"
3 0 44 #"(lib \"number-snip.ss\" \"drscheme\" \"private\")\0"
1 0 36 #"(lib \"comment-snip.ss\" \"framework\")\0"
1 0 93
(
 #"((lib \"collapsed-snipclass.ss\" \"framework\") (lib \"collapsed-sni"
 #"pclass-wxme.ss\" \"framework\"))\0"
) 0 0 43 #"(lib \"collapsed-snipclass.ss\" \"framework\")\0"
0 0 19 #"drscheme:sexp-snip\0"
0 0 29 #"drscheme:bindings-snipclass%\0"
1 0 101
(
 #"((lib \"ellipsis-snip.rkt\" \"drracket\" \"private\") (lib \"ellipsi"
 #"s-snip-wxme.rkt\" \"drracket\" \"private\"))\0"
) 2 0 88
(
 #"((lib \"pict-snip.rkt\" \"drracket\" \"private\") (lib \"pict-snip.r"
 #"kt\" \"drracket\" \"private\"))\0"
) 0 0 55
#"((lib \"snip.rkt\" \"pict\") (lib \"snip-wxme.rkt\" \"pict\"))\0"
1 0 34 #"(lib \"bullet-snip.rkt\" \"browser\")\0"
0 0 25 #"(lib \"matrix.ss\" \"htdp\")\0"
1 0 22 #"drscheme:lambda-snip%\0"
1 0 29 #"drclickable-string-snipclass\0"
0 0 26 #"drracket:spacer-snipclass\0"
0 0 57
#"(lib \"hrule-snip.rkt\" \"macro-debugger\" \"syntax-browser\")\0"
1 0 26 #"drscheme:pict-value-snip%\0"
0 0 45 #"(lib \"image-snipr.ss\" \"slideshow\" \"private\")\0"
1 0 38 #"(lib \"pict-snipclass.ss\" \"slideshow\")\0"
2 0 55 #"(lib \"vertical-separator-snip.ss\" \"stepper\" \"private\")\0"
1 0 18 #"drscheme:xml-snip\0"
1 0 31 #"(lib \"xml-snipclass.ss\" \"xml\")\0"
1 0 21 #"drscheme:scheme-snip\0"
2 0 34 #"(lib \"scheme-snipclass.ss\" \"xml\")\0"
1 0 10 #"text-box%\0"
1 0 32 #"(lib \"text-snipclass.ss\" \"xml\")\0"
1 0 1 6 #"wxloc\0"
          0 0 83 0 1 #"\0"
0 75 1 #"\0"
0 12 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 0 9
#"Standard\0"
0 75 6 #"Menlo\0"
0 12 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1 1 1 1 1 1 0 0 0 0 0 0 -1 -1 2 24
#"framework:default-color\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 15
#"text:ports out\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 255 0 0 0 0 0 -1
-1 2 15 #"text:ports err\0"
0 -1 1 #"\0"
1 0 -1 -1 93 -1 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 17
#"text:ports value\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 27 #"Matching Parenthesis Style\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:symbol\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 38
#"framework:syntax-color:scheme:keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2
38 #"framework:syntax-color:scheme:comment\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:string\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 35
#"framework:syntax-color:scheme:text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 39
#"framework:syntax-color:scheme:constant\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 49
#"framework:syntax-color:scheme:hash-colon-keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 42
#"framework:syntax-color:scheme:parenthesis\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:error\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:other\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 16
#"Misspelled Text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2
38 #"drracket:check-syntax:lexically-bound\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 28
#"drracket:check-syntax:set!d\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 37
#"drracket:check-syntax:unused-require\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"drracket:check-syntax:free-variable\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 31
#"drracket:check-syntax:imported\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 47
#"drracket:check-syntax:my-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 50
#"drracket:check-syntax:their-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 48
#"drracket:check-syntax:unk-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
49 #"drracket:check-syntax:both-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
26 #"plt:htdp:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 2 27
#"plt:htdp:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 4 1
#"\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 4 #"XML\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 37 #"plt:module-language:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 38
#"plt:module-language:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 4 1
#"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 100 0 0 0 0 -1
-1 0 1 #"\0"
0 75 6 #"Menlo\0"
0.0 11 90 -1 90 -1 3 -1 0 1 0 1 0 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 150 0 150 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 255 0 0 0 0
0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 175 0 0
0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 200 0 0 0 0
0 -1 -1 4 32 #"widget.rkt::browser-text% basic\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 59
#"macro-debugger/syntax-browser/properties color-text% basic\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 62 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 190 190 190
0 0 0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 255 0 0 0 0
0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 255 0 0
0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 107 142 35 0
0 0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 100 0 0 0
0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 139 0 0 0 0
0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 100 149 237
0 0 0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 65 105 225 0
0 0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 70 130 180 0
0 0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 47 79 79 0 0
0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 139 0 0
0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 75 0 130 0 0
0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 160 32 240 0
0 0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 255 165 0 0
0 0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 250 128 114
0 0 0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 184 134 11 0
0 0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 128 128 0 0
0 0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 169 169 169
0 0 0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1           0 1246 0 28 3 12 #"#lang racket"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 23 #"; Author: Dustin Gulley"
0 0 24 29 1 #"\n"
0 0 17 3 16 #"; Class: CSC 525"
0 0 24 29 1 #"\n"
0 0 17 3 75
(
 #"; Description: Project 4. Represent a matrix and provide accessors/m"
 #"utators"
) 0 0 24 29 1 #"\n"
0 0 17 3 25 #"; Due date: April 26 2017"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 11 #"make-matrix"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 9 #"row-count"
0 0 24 3 1 #" "
0 0 14 3 9 #"col-count"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 8 #"a-matrix"
0 0 24 3 2 #" ("
0 0 14 3 5 #"quote"
0 0 24 3 6 #" ())))"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 17 3 16 #"; number -> list"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 17 3 70
(
 #"; Builds a default matrix, this is just used once to set up our matr"
 #"ix"
) 0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 17 3 39 #"; given 3 3, expect (0 0 0 0 0 0 0 0 0)"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 17 3 33 #"; given 2 3, expect (0 0 0 0 0 0)"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 17 3 33 #"; given 3 2, expect (0 0 0 0 0 0)"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 15 3 6 #"letrec"
0 0 24 3 3 #" (("
0 0 14 3 13 #"make-matrix-h"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 8 #"matrices"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 33 #"                                ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" (("
0 0 14 3 1 #">"
0 0 24 3 1 #" "
0 0 14 3 8 #"matrices"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 3 #") ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 2 #" ("
0 0 14 3 13 #"make-matrix-h"
0 0 24 3 2 #" ("
0 0 14 3 1 #"-"
0 0 24 3 1 #" "
0 0 14 3 8 #"matrices"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 39 #"                                      ("
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 5 #"quote"
0 0 24 3 9 #" ()))))))"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 4 #"set!"
0 0 24 3 1 #" "
0 0 14 3 8 #"a-matrix"
0 0 24 3 2 #" ("
0 0 14 3 13 #"make-matrix-h"
0 0 24 3 2 #" ("
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 14 3 9 #"row-count"
0 0 24 3 1 #" "
0 0 14 3 9 #"col-count"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 15 3 6 #"letrec"
0 0 24 3 2 #" ("
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"               "
0 0 17 3 13 #"; _ -> number"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"               "
0 0 17 3 48 #"; Retrives the number of nodes within the matrix"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"               "
0 0 17 3 14 #"; with matrix "
0 0 17 3 2 #"1 "
0 0 17 3 27 #"3 1, 2 2 3, 3 1 2, expect 9"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ("
0 0 14 3 5 #"count"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 5 #" () ("
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 14 3 9 #"row-count"
0 0 24 3 1 #" "
0 0 14 3 9 #"col-count"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"               "
0 0 17 3 25 #"; number number -> number"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"               "
0 0 17 3 54 #"; Retrieves the number from the node within the matrix"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"               "
0 0 17 3 54 #"; with matrix 1 3 1, 2 2 3, 3 1 2, given 2 2, expect 2"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"               "
0 0 17 3 54 #"; with matrix 1 3 1, 2 2 3, 3 1 2, given 3 1, expect 3"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"               "
0 0 17 3 55 #"; with matrix 1 3 1, 2 2 3, 3 1 2, given 4 1, expect ()"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"               "
0 0 17 3 55 #"; with matrix 1 3 1, 2 2 3, 3 1 2, given 1 4, expect ()"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ("
0 0 14 3 11 #"get-row-col"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 5 #"a-row"
0 0 24 3 1 #" "
0 0 14 3 5 #"a-col"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 31 #"                              ("
0 0 15 3 6 #"letrec"
0 0 24 3 3 #" (("
0 0 14 3 13 #"get-row-col-h"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 5 #"a-col"
0 0 24 3 1 #" "
0 0 14 3 5 #"a-row"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 57 #"                                                        ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" (("
0 0 14 3 5 #"null?"
0 0 24 3 1 #" "
0 0 14 3 5 #"a-row"
0 0 24 3 3 #") ("
0 0 14 3 5 #"quote"
0 0 24 3 5 #" ()))"
0 0 24 29 1 #"\n"
0 0 24 3 64
#"                                                              (("
0 0 14 3 1 #"="
0 0 24 3 1 #" "
0 0 14 3 5 #"a-col"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 3 #") ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 5 #"a-row"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 63
#"                                                              ("
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 13 #"get-row-col-h"
0 0 24 3 2 #" ("
0 0 14 3 1 #"-"
0 0 24 3 1 #" "
0 0 14 3 5 #"a-col"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 3 #") ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 5 #"a-row"
0 0 24 3 7 #")))))))"
0 0 24 29 1 #"\n"
0 0 24 3 33 #"                                ("
0 0 14 3 13 #"get-row-col-h"
0 0 24 3 1 #" "
0 0 14 3 5 #"a-col"
0 0 24 3 2 #" ("
0 0 14 3 7 #"get-row"
0 0 24 3 1 #" "
0 0 14 3 5 #"a-row"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"               "
0 0 17 3 30 #"; number number number -> list"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"               "
0 0 17 3 43 #"; Sets the specified row/col to the number."
0 0 24 29 1 #"\n"
0 0 24 3 15 #"               "
0 0 17 3 78
(
 #"; It will both mutate by setting the exising matrix to have the chan"
 #"ged number"
) 0 0 24 29 1 #"\n"
0 0 24 3 15 #"               "
0 0 17 3 44 #"; and it will also return the mutated matrix"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"               "
0 0 17 3 30 #"; with matrix 1 3 1, 2 2 3, 3 "
0 0 17 3 1 #"1"
0 0 17 3 3 #" 2,"
0 0 17 3 1 #" "
0 0 17 3 5 #"given"
0 0 17 3 1 #" "
0 0 17 3 1 #"2"
0 0 17 3 1 #" "
0 0 17 3 1 #"2"
0 0 17 3 1 #" "
0 0 17 3 1 #"3"
0 0 17 3 1 #","
0 0 17 3 1 #" "
0 0 17 3 6 #"expect"
0 0 17 3 2 #" ("
0 0 17 3 1 #"1"
0 0 17 3 1 #" "
0 0 17 3 1 #"3"
0 0 17 3 1 #" "
0 0 17 3 1 #"1"
0 0 17 3 1 #" "
0 0 17 3 1 #"2"
0 0 17 3 1 #" "
0 0 17 3 1 #"3"
0 0 17 3 1 #" "
0 0 17 3 1 #"3"
0 0 17 3 1 #" "
0 0 17 3 1 #"3"
0 0 17 3 1 #" "
0 0 17 3 1 #"1"
0 0 17 3 3 #" 2)"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"               "
0 0 17 3 14 #"; with matrix "
0 0 17 3 16 #"1 3 1, 2 2 3, 3 "
0 0 17 3 26 #"1 2, given 3 1 2, expect ("
0 0 17 3 20 #"1 3 1, 2 2 3, 2 1 2)"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"               "
0 0 17 3 76
(
 #"; with matrix 1 3 1, 2 2 3, 3 1 2, given 0 0 2, expect (1 3 1, 2 2 3"
 #", 3 1 2)"
) 0 0 24 29 1 #"\n"
0 0 24 3 15 #"               "
0 0 17 3 76
(
 #"; with matrix 1 3 1, 2 2 3, 3 1 2, given 4 4 4, expect (1 3 1, 2 2 3"
 #", 3 1 2)"
) 0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ("
0 0 14 3 12 #"set-row-col!"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 5 #"a-row"
0 0 24 3 1 #" "
0 0 14 3 5 #"a-col"
0 0 24 3 1 #" "
0 0 14 3 6 #"a-node"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 32 #"                               ("
0 0 15 3 6 #"let/cc"
0 0 24 3 1 #" "
0 0 14 3 4 #"skip"
0 0 24 29 1 #"\n"
0 0 24 3 34 #"                                 ("
0 0 15 3 6 #"letrec"
0 0 24 3 3 #" (("
0 0 14 3 14 #"set-row-col-h!"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 5 #"a-row"
0 0 24 3 1 #" "
0 0 14 3 5 #"a-col"
0 0 24 3 1 #" "
0 0 14 3 6 #"matrix"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 61
#"                                                            ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" (("
0 0 14 3 5 #"null?"
0 0 24 3 1 #" "
0 0 14 3 6 #"matrix"
0 0 24 3 3 #") ("
0 0 14 3 4 #"skip"
0 0 24 3 1 #" "
0 0 14 3 8 #"a-matrix"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 68
#"                                                                  (("
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 3 #"eq?"
0 0 24 3 1 #" "
0 0 14 3 5 #"a-row"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 3 #") ("
0 0 14 3 3 #"eq?"
0 0 24 3 1 #" "
0 0 14 3 5 #"a-col"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 4 #")) ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 14 3 6 #"a-node"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 6 #"matrix"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 68
#"                                                                  (("
0 0 14 3 3 #"eq?"
0 0 24 3 1 #" "
0 0 14 3 5 #"a-col"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 3 #") ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 6 #"matrix"
0 0 24 3 3 #") ("
0 0 14 3 14 #"set-row-col-h!"
0 0 24 3 2 #" ("
0 0 14 3 1 #"-"
0 0 24 3 1 #" "
0 0 14 3 5 #"a-row"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 2 #") "
0 0 14 3 9 #"col-count"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 6 #"matrix"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 67
#"                                                                  ("
0 0 14 3 4 #"else"
0 0 24 3 3 #"  ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 6 #"matrix"
0 0 24 3 3 #") ("
0 0 14 3 14 #"set-row-col-h!"
0 0 24 3 1 #" "
0 0 14 3 5 #"a-row"
0 0 24 3 2 #" ("
0 0 14 3 1 #"-"
0 0 24 3 1 #" "
0 0 14 3 5 #"a-col"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 3 #") ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 6 #"matrix"
0 0 24 3 8 #"))))))))"
0 0 24 29 1 #"\n"
0 0 24 3 36 #"                                   ("
0 0 15 3 3 #"let"
0 0 24 3 5 #" () ("
0 0 14 3 4 #"set!"
0 0 24 3 1 #" "
0 0 14 3 8 #"a-matrix"
0 0 24 3 2 #" ("
0 0 14 3 14 #"set-row-col-h!"
0 0 24 3 1 #" "
0 0 14 3 5 #"a-row"
0 0 24 3 1 #" "
0 0 14 3 5 #"a-col"
0 0 24 3 1 #" "
0 0 14 3 8 #"a-matrix"
0 0 24 3 4 #"))) "
0 0 14 3 8 #"a-matrix"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"               "
0 0 17 3 16 #"; number -> list"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"               "
0 0 17 3 46 #"; Returns the specified column from the matrix"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"               "
0 0 17 3 14 #"; with matrix "
0 0 17 3 2 #"1 "
0 0 17 3 12 #"3 1, 2 2 3, "
0 0 17 3 30 #"3 1 2, given 2, expect (3 2 1)"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"               "
0 0 17 3 15 #"; with matrix 1"
0 0 17 3 2 #" 2"
0 0 17 3 41 #" 3, 3 2 1, 1 3 2, given 3, expect (3 1 2)"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"               "
0 0 17 3 54 #"; with matrix 1 3 1, 2 2 3, 3 1 2, given -1, expect ()"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"               "
0 0 17 3 53 #"; with matrix 1 3 1, 2 2 3, 3 1 2, given 0, expect ()"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"               "
0 0 17 3 53 #"; with matrix 1 3 1, 2 2 3, 3 1 2, given 4, expect ()"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ("
0 0 14 3 7 #"get-col"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 5 #"a-col"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 26 #"                          "
0 0 17 3 44 #"; Helper function so we don't recur on a-col"
0 0 24 29 1 #"\n"
0 0 24 3 27 #"                          ("
0 0 15 3 6 #"letrec"
0 0 24 3 3 #" (("
0 0 14 3 9 #"get-col-h"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 4 #"rows"
0 0 24 3 1 #" "
0 0 14 3 4 #"cols"
0 0 24 3 1 #" "
0 0 14 3 6 #"matrix"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 49 #"                                                ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" (("
0 0 14 3 1 #">"
0 0 24 3 1 #" "
0 0 14 3 4 #"cols"
0 0 24 3 1 #" "
0 0 14 3 9 #"col-count"
0 0 24 3 3 #") ("
0 0 14 3 9 #"get-col-h"
0 0 24 3 2 #" ("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 14 3 4 #"rows"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 2 #") "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 14 3 6 #"matrix"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 56 #"                                                      (("
0 0 14 3 2 #"or"
0 0 24 3 2 #" ("
0 0 14 3 1 #">"
0 0 24 3 1 #" "
0 0 14 3 4 #"rows"
0 0 24 3 1 #" "
0 0 14 3 9 #"row-count"
0 0 24 3 3 #") ("
0 0 14 3 5 #"null?"
0 0 24 3 1 #" "
0 0 14 3 6 #"matrix"
0 0 24 3 4 #")) ("
0 0 14 3 5 #"quote"
0 0 24 3 5 #" ()))"
0 0 24 29 1 #"\n"
0 0 24 3 56 #"                                                      (("
0 0 14 3 1 #"="
0 0 24 3 1 #" "
0 0 14 3 4 #"cols"
0 0 24 3 1 #" "
0 0 14 3 5 #"a-col"
0 0 24 3 3 #") ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 6 #"matrix"
0 0 24 3 3 #") ("
0 0 14 3 9 #"get-col-h"
0 0 24 3 1 #" "
0 0 14 3 4 #"rows"
0 0 24 3 2 #" ("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 14 3 4 #"cols"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 3 #") ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 6 #"matrix"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 55 #"                                                      ("
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 9 #"get-col-h"
0 0 24 3 1 #" "
0 0 14 3 4 #"rows"
0 0 24 3 2 #" ("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 14 3 4 #"cols"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 3 #") ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 6 #"matrix"
0 0 24 3 7 #")))))))"
0 0 24 29 1 #"\n"
0 0 24 3 29 #"                            ("
0 0 14 3 9 #"get-col-h"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 14 3 8 #"a-matrix"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"               "
0 0 17 3 16 #"; number -> list"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"               "
0 0 17 3 43 #"; Returns the specified row from the matrix"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"               "
0 0 17 3 14 #"; with matrix "
0 0 17 3 2 #"1 "
0 0 17 3 12 #"3 1, 2 2 3, "
0 0 17 3 1 #"3"
0 0 17 3 29 #" 1 2, given 2, expect (2 2 3)"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"               "
0 0 17 3 15 #"; with matrix 1"
0 0 17 3 2 #" 2"
0 0 17 3 13 #" 3, 3 2 1, 1 "
0 0 17 3 28 #"3 2, given 3, expect (1 3 2)"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"               "
0 0 17 3 14 #"; with matrix "
0 0 17 3 40 #"1 3 1, 2 2 3, 3 1 2, given -1, expect ()"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"               "
0 0 17 3 14 #"; with matrix "
0 0 17 3 39 #"1 3 1, 2 2 3, 3 1 2, given 0, expect ()"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"               "
0 0 17 3 14 #"; with matrix "
0 0 17 3 39 #"1 3 1, 2 2 3, 3 1 2, given 4, expect ()"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ("
0 0 14 3 7 #"get-row"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 6 #"a-find"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 26 #"                          "
0 0 17 3 53 #";Helper function so we don't keep recurring on a-find"
0 0 24 29 1 #"\n"
0 0 24 3 27 #"                          ("
0 0 15 3 6 #"letrec"
0 0 24 3 3 #" (("
0 0 14 3 9 #"get-row-h"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 4 #"rows"
0 0 24 3 1 #" "
0 0 14 3 4 #"cols"
0 0 24 3 1 #" "
0 0 14 3 6 #"matrix"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 49 #"                                                ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" (("
0 0 14 3 1 #">"
0 0 24 3 1 #" "
0 0 14 3 4 #"cols"
0 0 24 3 1 #" "
0 0 14 3 9 #"col-count"
0 0 24 3 3 #") ("
0 0 14 3 9 #"get-row-h"
0 0 24 3 2 #" ("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 14 3 4 #"rows"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 2 #") "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 14 3 6 #"matrix"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 56 #"                                                      (("
0 0 14 3 2 #"or"
0 0 24 3 2 #" ("
0 0 14 3 1 #">"
0 0 24 3 1 #" "
0 0 14 3 4 #"rows"
0 0 24 3 1 #" "
0 0 14 3 6 #"a-find"
0 0 24 3 3 #") ("
0 0 14 3 5 #"null?"
0 0 24 3 1 #" "
0 0 14 3 6 #"matrix"
0 0 24 3 4 #")) ("
0 0 14 3 5 #"quote"
0 0 24 3 5 #" ()))"
0 0 24 29 1 #"\n"
0 0 24 3 56 #"                                                      (("
0 0 14 3 1 #"="
0 0 24 3 1 #" "
0 0 14 3 4 #"rows"
0 0 24 3 1 #" "
0 0 14 3 6 #"a-find"
0 0 24 3 3 #") ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 6 #"matrix"
0 0 24 3 3 #") ("
0 0 14 3 9 #"get-row-h"
0 0 24 3 1 #" "
0 0 14 3 4 #"rows"
0 0 24 3 2 #" ("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 14 3 4 #"cols"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 3 #") ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 6 #"matrix"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 55 #"                                                      ("
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 9 #"get-row-h"
0 0 24 3 1 #" "
0 0 14 3 4 #"rows"
0 0 24 3 2 #" ("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 14 3 4 #"cols"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 3 #") ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 6 #"matrix"
0 0 24 3 7 #")))))))"
0 0 24 29 1 #"\n"
0 0 24 3 29 #"                            ("
0 0 14 3 9 #"get-row-h"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 14 3 8 #"a-matrix"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"               "
0 0 17 3 14 #"; list -> list"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"               "
0 0 17 3 30 #"; Sets a completely new matrix"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"               "
0 0 17 3 85
(
 #"; note that the new matrix should fit the requirements of the existi"
 #"ng col/size limit"
) 0 0 24 29 1 #"\n"
0 0 24 3 15 #"               "
0 0 17 3 89
(
 #"; there is no checking to ensure the col/size limit is the same.  If"
 #" an incorrectly sized"
) 0 0 24 29 1 #"\n"
0 0 24 3 15 #"               "
0 0 17 3 47 #"; matrix is put in, it will cause weird errors."
0 0 24 29 1 #"\n"
0 0 24 3 15 #"               "
0 0 17 3 83
(
 #"; This will return the new matrix as a list as well as set the curre"
 #"nt matrix to it"
) 0 0 24 29 1 #"\n"
0 0 24 3 15 #"               "
0 0 17 3 55 #"; given (1 3 1 2 2 3 3 1 2), expect (1 3 1 2 2 3 3 1 2)"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ("
0 0 14 3 11 #"set-matrix!"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 6 #"matrix"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 31 #"                              ("
0 0 15 3 3 #"let"
0 0 24 3 5 #" () ("
0 0 14 3 4 #"set!"
0 0 24 3 1 #" "
0 0 14 3 8 #"a-matrix"
0 0 24 3 1 #" "
0 0 14 3 6 #"matrix"
0 0 24 3 3 #")) "
0 0 14 3 8 #"a-matrix"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"               "
0 0 24 29 1 #"\n"
0 0 24 3 15 #"               "
0 0 17 3 14 #"; list -> list"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"               "
0 0 17 3 118
(
 #"; Multiplies two matrixs.  It does no mutation but instead returns a"
 #" list of the the values of the multiplied matrixes"
) 0 0 24 29 1 #"\n"
0 0 24 3 15 #"               "
0 0 17 3 102
(
 #"; Note the both matrixes are expected to have matching the row count"
 #" match the col count of the other,"
) 0 0 24 29 1 #"\n"
0 0 24 3 15 #"               "
0 0 17 3 54 #"; If they don't fit this format.. problems will happen"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"               "
0 0 17 3 31 #"; given (1 3 1 2 2 3 3 1 2) * ("
0 0 17 3 2 #"1 "
0 0 17 3 2 #"2 "
0 0 17 3 3 #"3 3"
0 0 17 3 1 #" "
0 0 17 3 3 #"2 1"
0 0 17 3 2 #" 1"
0 0 17 3 1 #" "
0 0 17 3 1 #"3"
0 0 17 3 1 #" "
0 0 17 3 12 #"2), expect ("
0 0 17 3 2 #"11"
0 0 17 3 1 #" "
0 0 17 3 2 #"11"
0 0 17 3 1 #" "
0 0 17 3 1 #"8"
0 0 17 3 1 #" "
0 0 17 3 2 #"11"
0 0 17 3 1 #" "
0 0 17 3 2 #"17"
0 0 17 3 1 #" "
0 0 17 3 2 #"14"
0 0 17 3 1 #" "
0 0 17 3 1 #"8"
0 0 17 3 1 #" "
0 0 17 3 2 #"14"
0 0 17 3 4 #" 14)"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ("
0 0 14 3 8 #"multiply"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 8 #"b-matrix"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 27 #"                           "
0 0 24 29 1 #"\n"
0 0 24 3 27 #"                           "
0 0 17 3 59
#";Helper function for multiplying two lists in a row/col way"
0 0 24 29 1 #"\n"
0 0 24 3 28 #"                           ("
0 0 15 3 6 #"letrec"
0 0 24 3 3 #" (("
0 0 14 3 18 #"multiple-add-lists"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 6 #"a-list"
0 0 24 3 1 #" "
0 0 14 3 6 #"b-list"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 59
#"                                                          ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" (("
0 0 14 3 2 #"or"
0 0 24 3 2 #" ("
0 0 14 3 5 #"null?"
0 0 24 3 1 #" "
0 0 14 3 6 #"a-list"
0 0 24 3 3 #") ("
0 0 14 3 5 #"null?"
0 0 24 3 1 #" "
0 0 14 3 6 #"b-list"
0 0 24 3 3 #")) "
0 0 21 3 1 #"0"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 65
#"                                                                ("
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 1 #"+"
0 0 24 3 2 #" ("
0 0 14 3 1 #"*"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 6 #"a-list"
0 0 24 3 3 #") ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 6 #"b-list"
0 0 24 3 4 #")) ("
0 0 14 3 18 #"multiple-add-lists"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 6 #"a-list"
0 0 24 3 3 #") ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 6 #"b-list"
0 0 24 3 7 #")))))))"
0 0 24 29 1 #"\n"
0 0 24 3 36 #"                                    "
0 0 17 3 95
(
 #";Helper function to perform the multiplication and not have to recur"
 #" on b-matrix               "
) 0 0 24 29 1 #"\n"
0 0 24 3 37 #"                                    ("
0 0 14 3 10 #"multiply-h"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 5 #"row-n"
0 0 24 3 1 #" "
0 0 14 3 5 #"col-n"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 51 #"                                                  ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 3 #"row"
0 0 24 3 2 #" ("
0 0 14 3 7 #"get-row"
0 0 24 3 1 #" "
0 0 14 3 5 #"row-n"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 57 #"                                                        ("
0 0 14 3 3 #"col"
0 0 24 3 3 #" (("
0 0 14 3 8 #"b-matrix"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 7 #"get-col"
0 0 24 3 2 #") "
0 0 14 3 5 #"col-n"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 53 #"                                                    ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" (("
0 0 14 3 1 #">"
0 0 24 3 1 #" "
0 0 14 3 5 #"row-n"
0 0 24 3 1 #" "
0 0 14 3 9 #"row-count"
0 0 24 3 3 #") ("
0 0 14 3 5 #"quote"
0 0 24 3 5 #" ()))"
0 0 24 29 1 #"\n"
0 0 24 3 60
#"                                                          (("
0 0 14 3 1 #"="
0 0 24 3 1 #" "
0 0 14 3 5 #"col-n"
0 0 24 3 1 #" "
0 0 14 3 9 #"row-count"
0 0 24 3 3 #") ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 18 #"multiple-add-lists"
0 0 24 3 1 #" "
0 0 14 3 3 #"row"
0 0 24 3 1 #" "
0 0 14 3 3 #"col"
0 0 24 3 3 #") ("
0 0 14 3 10 #"multiply-h"
0 0 24 3 2 #" ("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 14 3 5 #"row-n"
0 0 24 3 2 #") "
0 0 21 3 1 #"1"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 59
#"                                                          ("
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 18 #"multiple-add-lists"
0 0 24 3 1 #" "
0 0 14 3 3 #"row"
0 0 24 3 1 #" "
0 0 14 3 3 #"col"
0 0 24 3 3 #") ("
0 0 14 3 10 #"multiply-h"
0 0 24 3 1 #" "
0 0 14 3 5 #"row-n"
0 0 24 3 2 #" ("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 14 3 5 #"col-n"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 9 #")))))))))"
0 0 24 29 1 #"\n"
0 0 24 3 30 #"                             ("
0 0 14 3 10 #"multiply-h"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               )"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"        "
0 0 17 3 23 #"; <pattern> -> <varies>"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"        "
0 0 17 3 44 #"; incorporates closure based message passing"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 15 3 13 #"match-lambda*"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"          (("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 10 #"get-matrix"
0 0 24 3 2 #") "
0 0 14 3 8 #"a-matrix"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"          (("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 11 #"get-row-col"
0 0 24 3 1 #" "
0 0 14 3 5 #"a-row"
0 0 24 3 1 #" "
0 0 14 3 5 #"a-col"
0 0 24 3 3 #") ("
0 0 14 3 11 #"get-row-col"
0 0 24 3 1 #" "
0 0 14 3 5 #"a-row"
0 0 24 3 1 #" "
0 0 14 3 5 #"a-col"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"          (("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 12 #"set-row-col!"
0 0 24 3 1 #" "
0 0 14 3 5 #"a-row"
0 0 24 3 1 #" "
0 0 14 3 5 #"a-col"
0 0 24 3 1 #" "
0 0 14 3 6 #"a-node"
0 0 24 3 3 #") ("
0 0 14 3 12 #"set-row-col!"
0 0 24 3 1 #" "
0 0 14 3 5 #"a-row"
0 0 24 3 1 #" "
0 0 14 3 5 #"a-col"
0 0 24 3 1 #" "
0 0 14 3 6 #"a-node"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"          (("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 5 #"count"
0 0 24 3 3 #") ("
0 0 14 3 5 #"count"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"          (("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 14 3 8 #"matrices"
0 0 24 3 1 #" "
0 0 14 3 3 #"..."
0 0 24 3 3 #") ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" (("
0 0 14 3 5 #"null?"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 8 #"matrices"
0 0 24 3 4 #")) ("
0 0 14 3 8 #"multiply"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 8 #"matrices"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 36 #"                                   ("
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 8 #"multiply"
0 0 24 3 3 #" (("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 8 #"matrices"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 14 3 1 #"*"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 8 #"matrices"
0 0 24 3 6 #"))))))"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"          (("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"set!"
0 0 24 3 1 #" "
0 0 14 3 8 #"a-matrix"
0 0 24 3 3 #") ("
0 0 14 3 11 #"set-matrix!"
0 0 24 3 1 #" "
0 0 14 3 8 #"a-matrix"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"          (("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 7 #"get-col"
0 0 24 3 1 #" "
0 0 14 3 5 #"a-col"
0 0 24 3 3 #") ("
0 0 14 3 7 #"get-col"
0 0 24 3 1 #" "
0 0 14 3 5 #"a-col"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"          (("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 7 #"get-row"
0 0 24 3 1 #" "
0 0 14 3 5 #"a-row"
0 0 24 3 3 #") ("
0 0 14 3 7 #"get-row"
0 0 24 3 1 #" "
0 0 14 3 5 #"a-row"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"          (("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 13 #"get-row-count"
0 0 24 3 2 #") "
0 0 14 3 9 #"row-count"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"          (("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 13 #"get-col-count"
0 0 24 3 2 #") "
0 0 14 3 9 #"col-count"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 1 #"_"
0 0 24 3 2 #" ("
0 0 14 3 5 #"quote"
0 0 24 3 10 #" ())))))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 37 #"; number number number number -> list"
0 0 24 29 1 #"\n"
0 0 17 3 94
(
 #"; Fills the matrix with random values p where 0 =< n =< max and m = "
 #"n/denom and p = m - decr. "
) 0 0 24 29 1 #"\n"
0 0 17 3 8 #"; given "
0 0 17 3 1 #"6"
0 0 17 3 1 #" "
0 0 17 3 3 #"100"
0 0 17 3 1 #" "
0 0 17 3 3 #"100"
0 0 17 3 22 #" 1/2, possibly expect "
0 0 17 3 1 #"("
0 8          10 17 5 #"7/50\0"
3 #"#e\0"
6 #"mixed\0"
2 #"1\0"
0 0 17 3 1 #" "
0 8          10 17 6 #"19/50\0"
3 #"#e\0"
6 #"mixed\0"
2 #"1\0"
0 0 17 3 1 #" "
0 8          10 17 7 #"-19/50\0"
3 #"#e\0"
6 #"mixed\0"
2 #"1\0"
0 0 17 3 1 #" "
0 8          10 17 5 #"9/20\0"
3 #"#e\0"
6 #"mixed\0"
2 #"1\0"
0 0 17 3 1 #" "
0 8          10 17 5 #"8/25\0"
3 #"#e\0"
6 #"mixed\0"
2 #"1\0"
0 0 17 3 1 #" "
0 8          10 17 5 #"1/20\0"
3 #"#e\0"
6 #"mixed\0"
2 #"1\0"
0 0 17 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 19 #"list-of-random-vals"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 9 #"list-size"
0 0 24 3 1 #" "
0 0 14 3 3 #"max"
0 0 24 3 1 #" "
0 0 14 3 5 #"denom"
0 0 24 3 1 #" "
0 0 14 3 4 #"decr"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 31 #"                              ("
0 0 15 3 6 #"letrec"
0 0 24 3 3 #" (("
0 0 14 3 21 #"list-of-random-vals-h"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 9 #"list-size"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 65
#"                                                                ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" (("
0 0 14 3 1 #">"
0 0 24 3 1 #" "
0 0 14 3 9 #"list-size"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 3 #") ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 1 #"-"
0 0 24 3 2 #" ("
0 0 14 3 1 #"/"
0 0 24 3 2 #" ("
0 0 14 3 6 #"random"
0 0 24 3 1 #" "
0 0 14 3 3 #"max"
0 0 24 3 2 #") "
0 0 14 3 5 #"denom"
0 0 24 3 2 #") "
0 0 14 3 4 #"decr"
0 0 24 3 3 #") ("
0 0 14 3 21 #"list-of-random-vals-h"
0 0 24 3 2 #" ("
0 0 14 3 1 #"-"
0 0 24 3 1 #" "
0 0 14 3 9 #"list-size"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 71
(
 #"                                                                    "
 #"  ("
) 0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 5 #"quote"
0 0 24 3 9 #" ()))))))"
0 0 24 29 1 #"\n"
0 0 24 3 33 #"                                ("
0 0 14 3 21 #"list-of-random-vals-h"
0 0 24 3 1 #" "
0 0 14 3 9 #"list-size"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 50 #"; Provide access to this module within other files"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 7 #"provide"
0 0 24 3 1 #" "
0 0 14 3 11 #"make-matrix"
0 0 24 3 1 #" "
0 0 14 3 19 #"list-of-random-vals"
0 0 24 3 1 #")"
0           0
